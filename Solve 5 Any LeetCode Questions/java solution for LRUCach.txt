import java.util.HashMap;
import java.util.LinkedHashSet;

class LRUCache
{

    private int capacity;
    private HashMap<Integer, Integer> map;
    private LinkedHashSet<Integer> set;

    public LRUCache(int capacity)
    {
        this.capacity = capacity;
        map = new HashMap<Integer, Integer>();
        set = new LinkedHashSet<Integer>();
    }

    public int get(int key)
    {
        if (!map.containsKey(key))
            return -1;

        set.remove(key);
        set.add(key);
        return map.get(key);
    }

    public void put(int key, int value)
    {
        if (map.containsKey(key))
        {
            map.put(key,value);
            set.remove(key);
            set.add(key);
        }
        else
        {
            if (map.size() >= capacity)
            {
                set.remove(map.remove(set.iterator().next()));
            }
            map.put(key, value);
            set.add(key);
        }
    }

    public static void main(String[] args) {
        LRUCache lRUCache = new LRUCache(2);
        lRUCache.put(1, 1);
        lRUCache.put(2, 2);
        System.out.println(lRUCache.get(1));
        lRUCache.put(3, 3);
        System.out.println(lRUCache.get(2));
        lRUCache.put(4, 4);
        System.out.println(lRUCache.get(1));
        System.out.println(lRUCache.get(3));
        System.out.println(lRUCache.get(4));
    }
}
